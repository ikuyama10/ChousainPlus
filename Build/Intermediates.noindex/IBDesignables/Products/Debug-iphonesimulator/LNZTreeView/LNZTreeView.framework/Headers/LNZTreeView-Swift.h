// Generated by Apple Swift version 4.2.1 (swiftlang-1000.11.42 clang-1000.11.45.1)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <objc/NSObject.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
@import CoreGraphics;
@import Foundation;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="LNZTreeView",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@protocol LNZTreeViewDataSource;
@protocol LNZTreeViewDelegate;
@class NSCoder;

SWIFT_CLASS("_TtC11LNZTreeView11LNZTreeView")
@interface LNZTreeView : UIView
@property (nonatomic) CGFloat indentationWidth;
@property (nonatomic) BOOL isEditing;
@property (nonatomic) CGFloat rowHeight;
@property (nonatomic) BOOL allowsSelectionDuringEditing;
@property (nonatomic, weak) IBOutlet id <LNZTreeViewDataSource> _Nullable dataSource;
@property (nonatomic, weak) IBOutlet id <LNZTreeViewDelegate> _Nullable delegate;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init;
- (void)didMoveToSuperview;
@end

@class UITableView;
@class UITableViewCell;

@interface LNZTreeView (SWIFT_EXTENSION(LNZTreeView)) <UITableViewDataSource>
- (NSInteger)numberOfSectionsInTableView:(UITableView * _Nonnull)tableView SWIFT_WARN_UNUSED_RESULT;
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
@end


@interface LNZTreeView (SWIFT_EXTENSION(LNZTreeView)) <UITableViewDelegate>
- (CGFloat)tableView:(UITableView * _Nonnull)tableView heightForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (BOOL)tableView:(UITableView * _Nonnull)tableView canEditRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCellEditingStyle)tableView:(UITableView * _Nonnull)tableView editingStyleForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView commitEditingStyle:(UITableViewCellEditingStyle)editingStyle forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end

@protocol TreeNodeProtocol;

SWIFT_PROTOCOL("_TtP11LNZTreeView21LNZTreeViewDataSource_")
@protocol LNZTreeViewDataSource
/// The tree view can be sectioned just like the UITableView
- (NSInteger)numberOfSectionsIn:(LNZTreeView * _Nonnull)treeView SWIFT_WARN_UNUSED_RESULT;
/// This method is indexed differently from a normal UITableView. The number of rows in a method call is
/// dependant from the parent node parameter. If not nil, the parentNode indicates that treeView wants to
/// know the number of children for the given parentNode, else the treeView is interested in root elements.
/// \param treeView The treeView asking for the number of rows.
///
/// \param section An index number identifying the section in treeView.
///
/// \param parentNode The TreeNode in which the treeView is interested in knowing its children count.
/// If nil, the treeView is interested in the root for the section.
///
///
/// returns:
/// An int value indicating the amount of nodes for a given parentNode
- (NSInteger)treeView:(LNZTreeView * _Nonnull)treeView numberOfRowsInSection:(NSInteger)section forParentNode:(id <TreeNodeProtocol> _Nullable)parentNode SWIFT_WARN_UNUSED_RESULT;
/// To avoid duplication, the treeView will ask as needed the node for a certain indexPath. The indexPath
/// is relative to the requested nodeâ€™s parent node. The parent node is passed in parameters.
/// <h2>Example:</h2>
/// An <em>indexPath</em> with row <em>i</em> and section <em>j</em> in parentNode <em>A</em> means the <em>i</em>th child of parentNode in the
/// section <em>j</em>. If not present parentNode, the requested node is the ith element in the root of the section <em>j</em>.
/// \param treeView The treeView asking for the node.
///
/// \param indexPath The indexPath of the requested node.
///
/// \param parentNode The parentNode of the requested node.
///
///
/// returns:
/// The requested node.
- (id <TreeNodeProtocol> _Nonnull)treeView:(LNZTreeView * _Nonnull)treeView nodeForRowAt:(NSIndexPath * _Nonnull)indexPath forParentNode:(id <TreeNodeProtocol> _Nullable)parentNode SWIFT_WARN_UNUSED_RESULT;
/// This method has to return the cell for a given node at a certain indexPath. The indexPath
/// is relative to the requested nodeâ€™s parent node. The parent node is passed in parameters.
/// <h2>Example:</h2>
/// An <em>indexPath</em> with row <em>i</em> and section <em>j</em> in parentNode <em>A</em> means the <em>i</em>th child of parentNode in the
/// section <em>j</em>. If not present parentNode, the requested node is the ith element in the root of the section <em>j</em>.
/// \param treeView The treeView asking for the node.
///
/// \param indexPath The indexPath of the requested node.
///
/// \param parentNode The parentNode of the requested node.
///
///
/// returns:
/// The cell for the node at <em>indexPath</em>.
- (UITableViewCell * _Nonnull)treeView:(LNZTreeView * _Nonnull)treeView cellForRowAt:(NSIndexPath * _Nonnull)indexPath forParentNode:(id <TreeNodeProtocol> _Nullable)parentNode isExpanded:(BOOL)isExpanded SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP11LNZTreeView19LNZTreeViewDelegate_")
@protocol LNZTreeViewDelegate
@optional
- (BOOL)treeView:(LNZTreeView * _Nonnull)treeView canEditRowAt:(NSIndexPath * _Nonnull)indexPath forParentNode:(id <TreeNodeProtocol> _Nullable)parentNode SWIFT_WARN_UNUSED_RESULT;
- (void)treeView:(LNZTreeView * _Nonnull)treeView commitDeleteForRowAt:(NSIndexPath * _Nonnull)indexPath forParentNode:(id <TreeNodeProtocol> _Nullable)parentNode;
- (CGFloat)treeView:(LNZTreeView * _Nonnull)treeView heightForNodeAt:(NSIndexPath * _Nonnull)indexPath forParentNode:(id <TreeNodeProtocol> _Nullable)parentNode SWIFT_WARN_UNUSED_RESULT;
/// This method is called when a node is successfully expanded. The indexPath is relative to the
/// <em>parentNode</em> parameter.
/// <h2>Example:</h2>
/// An <em>indexPath</em> with row <em>i</em> and section <em>j</em> in parentNode <em>A</em> means the <em>i</em>th child of parentNode in the
/// section <em>j</em>. If not present parentNode, the requested node is the ith element in the root of the section <em>j</em>.
/// \param treeView The tree view on which the event was triggered.
///
/// \param indexPath The indexPath of the expanded node, relative to its <em>parentNode</em>.
///
/// \param parentNode The parentNode for the expanded node. If nil, root is to be intended.
///
- (void)treeView:(LNZTreeView * _Nonnull)treeView didExpandNodeAt:(NSIndexPath * _Nonnull)indexPath forParentNode:(id <TreeNodeProtocol> _Nullable)parentNode;
/// This method is called when a node is successfully collapsed. The indexPath is relative to the
/// <em>parentNode</em> parameter.
/// <h2>Example:</h2>
/// An <em>indexPath</em> with row <em>i</em> and section <em>j</em> in parentNode <em>A</em> means the <em>i</em>th child of parentNode in the
/// section <em>j</em>. If not present parentNode, the requested node is the ith element in the root of the section <em>j</em>.
/// \param treeView The tree view on which the event was triggered.
///
/// \param indexPath The indexPath of the collapsed node, relative to its <em>parentNode</em>.
///
/// \param parentNode The parentNode for the collapsed node. If nil, root is to be intended.
///
- (void)treeView:(LNZTreeView * _Nonnull)treeView didCollapseNodeAt:(NSIndexPath * _Nonnull)indexPath forParentNode:(id <TreeNodeProtocol> _Nullable)parentNode;
/// This method is called when a node is successfully selected. The indexPath is relative to the
/// <em>parentNode</em> parameter.
/// <h2>Example:</h2>
/// An <em>indexPath</em> with row <em>i</em> and section <em>j</em> in parentNode <em>A</em> means the <em>i</em>th child of parentNode in the
/// section <em>j</em>. If not present parentNode, the requested node is the ith element in the root of the section <em>j</em>.
/// \param treeView The tree view on which the event was triggered.
///
/// \param indexPath The indexPath of the selected node, relative to its <em>parentNode</em>.
///
/// \param parentNode The parentNode for the selected node. If nil, root is to be intended.
///
- (void)treeView:(LNZTreeView * _Nonnull)treeView didSelectNodeAt:(NSIndexPath * _Nonnull)indexPath forParentNode:(id <TreeNodeProtocol> _Nullable)parentNode;
@end


SWIFT_PROTOCOL("_TtP11LNZTreeView16TreeNodeProtocol_")
@protocol TreeNodeProtocol
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
@property (nonatomic, readonly) BOOL isExpandable;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
